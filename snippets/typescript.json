{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// },

	"Separator /* +--+ */": {
		"prefix": "qsep",
		"body": [
			"/* +-----------------------------------------------------------------------------+ */"
		],
		"description": "Separator"
	},

	"Title of the top": {
		"prefix": "qttop",
		"body": [
			"/**",
			" * +---------------------------------------------------------------------------+",
			" *?| ${1:Ejemplo conceptual The Abstract Factory}                            $2*",
			" *?| ${3:Este ejemplo ilustra la estructura del patrón}                      $4*",
			" *?| ${5:centrándose en responder las siguientes preguntas:}                 $6*",
			" *?| ${7:¿De qué clases se compone?}                                         $8*",
			" *?| ${9:¿Qué papeles juegan esas clases?}                                  $10*",
			" *?| ${11:¿De qué forma se relacionan los elementos del patrón?}            $12*",
			" *?| ${13:index.ts: Ejemplo conceptual}                                     $14*",
			" * +---------------------------------------------------------------------------+",
			"*/",
		],
		"description": "Title of the top"
	},

	"ifee": {
		"prefix": "ife",
		"body": ["(()=>{\n\t$1\n})();"],
		"description": "fn IFFEE"
	},

	"afn": {
		"prefix": "afn",
		"body": ["const ${1:name}=($2)=>$3"],
		"description": "arrow fn"
	},

	"anfn": {
		"prefix": "anfn",
		"body": [" ($1)=>$2"],
		"description": "anon arrow fn"
	},

	"T cl": {
		"prefix": "tcl",
		"body": ["export ${1:TM_FILENAME_BASE}\n", "((e) => console.log(e)) ($0)"]
	},

	"function () => {}": {
		"prefix": "nf",
		"body": "function ${1:name} (${2:param}) {\n\t${3:return }\n}",
		"description": "function [name] () {}"
	},

	"export function () => {}": {
		"prefix": "ef",
		"body": "export function ${1:name} (${2:param}) {\n\t${3:return }\n}",
		"description": "function [name] () {}"
	},

	"() => {}": {
		"prefix": "af",
		"body": "(${1:el}) => ${2:r}",
		"description": "annon () => {}"
	},

	"QuteComments [*]": {
		"prefix": "qcom",
		"body": [
			"/****************************************************************",
			" *        $2           *::${1:PrinterCheatsheet}::*          $2          *",
			" ***************************************************************/"
		],
		"description": "Qute comments standard"
	},

	"QuteComments [t]": {
		"prefix": "qtcom",
		"body": [
			"/*",
			" *         $2        *::${1:FUNCTIONAL}::*       $2",
			" **************************************************************/"
		],
		"description": "Qute comments title"
	},

	"QuteCommentsTEST [!]": {
		"prefix": "qcomt",
		"body": [
			"/****************************************************************",
			" *         $2           !::${1:TESTQCOM}::!          $2          *",
			" ***************************************************************/"
		],
		"description": "Qute comments for TEST"
	},

	"QuteCommentsForCore": {
		"prefix": "qcore",
		"body": [
			"/****************************************************************",
			" *::::::::::::$2::::::::*::${1:PRINT|VERSION}::*::::::::::::$2::::::::::*",
			" ***************************************************************/",
			"$3"
		],
		"description": "Qute comments for the core"
	},

	"Doc": {
		"prefix": "ComDoc",
		"body": ["/**", " * $1", " */"],
		"description": "doc Documentation comments"
	}
}
