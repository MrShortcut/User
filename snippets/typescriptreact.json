{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:

	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// },

	"hookUseDimensions": {
		"prefix": "hookUseDimension",
		"body": [
			"type windowDimentions = {",
			"  width: number;",
			"  height: number;",
			"};",
			"",
			"/*",
			" *              *::USEDIMENSIONS|HOOK|::*",
			" *******************************|********************************/",
			"/**",
			" * It's a hook that returns a boolean value that indicates whether the screen is mobile or not.",
			" *",
			" * @return An object with the following properties:",
			" * @showMenu boolean",
			" * @setShowMenu (value: boolean) => void",
			" * @isMobile boolean",
			" *",
			" * > Example:",
			" * ```js",
			" *  const { showMenu, setShowMenu, isMobile } = useDimensionsHook()",
			" * ```",
			" */",
			"export const useDimensionsHook = () => {",
			"  const [ showMenu, setShowMenu ] = useState<boolean>(false)",
			"  const [ isMobile, setIsMobile ] = useState<boolean>(false)",
			"",
			"  const [ dimensions, setDimensions ] = useState<windowDimentions>({",
			"    height: window.innerHeight,",
			"    width: window.innerWidth",
			"  });",
			"",
			"  useEffect(() => {",
			"    const debouncedHandleResize = debounce(function handleResize () {",
			"      setDimensions({",
			"        height: window.innerHeight,",
			"        width: window.innerWidth",
			"      });",
			"    }, 1000);",
			"",
			"    window.addEventListener('resize', debouncedHandleResize);",
			"",
			"    return (_: void) => window.removeEventListener('resize', debouncedHandleResize);",
			"  });",
			"",
			"  useEffect(() => {",
			"    setIsMobile(false)",
			"    if (dimensions.width < 768) {",
			"      setIsMobile(true)",
			"    }",
			"  }, [ dimensions ])",
			"",
			"  return {",
			"    showMenu,",
			"    setShowMenu,",
			"    isMobile,",
			"  }",
			"}",
		],
		"description": "hookUseDimensions"
	},

	"hookDebounceUseDimensions": {
		"prefix": "hookDebounceUseDimensions",
		"body": [
			"/*",
			" *                *::HANDLE|DEBOUNCE|RESPONSIVE::",
			" *******************************|********************************/",
			"/**",
			" * It returns a function that, when called, will call the original",
			" * function after a delay.",
			" *",
			" * @param {Function} fn - The function to debounce.",
			" * @param {number} ms - The number of milliseconds to wait before",
			" *                      calling the function.",
			" * @return A function that takes a parameter and returns a function",
			" *         that takes a parameter.",
			" */",
			"function debounce (fn: Function, ms: number) {",
			"  let timer: null | NodeJS.Timeout;",
			"",
			"  return function(_: unknown): void {",
			"    clearTimeout(timer as string | number | NodeJS.Timeout | undefined);",
			"    timer = setTimeout(function(this: typeof globalThis, _: unknown): void {",
			"      timer = null;",
			"      fn.apply(this, arguments);",
			"      // console.log(" ðŸ¤– ", this, arguments) // |Debug|",
			"    }, ms);",
			"  };",
			"}",
		],
		"description": "hookDebounceUseDimensions"
	},

	"componentList": {
		"prefix": "componentList",
		"body": [
			"/****************************************************************",
			" *:::::::::::::::::::::::::*::LIST::*:::::::::::::::::::::::::::*",
			" ******************************|********************************/",
			"type Pokemons = {",
			"  _id: number",
			"  name: string",
			"}",
			"",
			"export function PokemonList ({ pokemon: pokemons }: { pokemon: Pokemons[] }): ReactElement {",
			"  return (",
			"    <section className={s.list}>",
			"      {pokemons.map(p => (",
			"        <PokemonCard key={p._id} />",
			"      ))}",
			"    </section>",
			"  )",
			"}",
			"",
			"PokemonList.defaultProps = {",
			"  pokemon: Array(10)",
			"    .fill(10)",
			"    .map((_, i) => ({ _id: i, name: 'Pikachu' })),",
			"}",
		],
		"description": "componentList"
	},

	"hookOntoggle": {
		"prefix": "hookOntoggle",
		"body": [
			"import { useMemo, useState } from 'react';",
			"",
			"/**",
			"* It returns a boolean value and an object with functions",
			"* to toggle the boolean value",
			"*",
			"* @param initialValue The initial value of the toggle.",
			"* @return An array with two values. The first value is",
			"*         the current value of the state. The second value",
			"*         is an object with four functions.",
			"*",
			"* @see Example:",
			"*  > const [ showNav, setShowNav ] = useOnToggle(false)",
			"*  >       onClick={() => setShowNav.toggle()}",
			"*/",
			"export const useOnToggle = (initialValue: boolean) => {",
			"	const [ v, setValue ] = useState<boolean>(initialValue);",
			"",
			"	const fns = useMemo(",
			"		() => ({",
			"			on: () => setValue(true),",
			"			off: () => setValue(false),",
			"			toggle: () => setValue(v => !v),",
			"			reset: () => setValue(initialValue),",
			"		}), [ initialValue ]",
			"	);",
			"",
			"	return [ v, fns ] as const;",
			"};",
		],
		"description": "hook useOntoggle"
	},

	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	},

	"Router": {
		"prefix": "routerRouter",
		"body": [
			"import { BrowserRouter, useRoutes } from 'react-router-dom';",
			"import { MyRoutes } from './Routes';",
			"import { Layout } from './layout/Layout';",
			"import LOADER from '@/loader';",
			"import './global.css'",
			"",
			"function R () {",
			"  const routing = useRoutes(MyRoutes)",
			"",
			"  return (",
			"    <>",
			"      {routing}",
			"    </>",
			"  )",
			"}",
			"",
			"ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(",
			"  <React.StrictMode>",
			"    <Suspense fallback={<LOADER />}>",
			"      <BrowserRouter>",
			"        <Layout>",
			"          <R />",
			"        </Layout>",
			"      </BrowserRouter>",
			"    </Suspense>",
			"  </React.StrictMode>",
			")",
		],
		"description": "Router useRouter"
	},

	"My routes": {
		"prefix": "routerMyRouter",
		"body": [
			"export const MyRoutes = [",
			"	{",
			"		path: '/app',",
			"		element: <App />,",
			"		isAuth: '',",
			"		id: 'âˆ†@qikz73noCWvzn|T&pG02PLt>11#l%*cHG;$HwD',",
			"	}, {",
			"		path: '/route2'",
			"		element: <Route2 />,",
			"		isAuth: '',",
			"		id: '/B87?âˆ†)(oAjI!|LN>xox~I>`lwZbV_KUxU~g!%W*',",
			"	}, {",
			"		path: '/route3",
			"		element: <Route3 />,",
			"		isAuth: '',",
			"		id: 'Wâ€¢ZHg!V/1,s@>lUâˆ†Hj_IbTQjpJF4-G>fbm$(B<',",
			"	},",
			"]",
		],
		"description": "MyRoutes"
	},

	"border tailwind": {
		"prefix": "dtail",
		"body": [
			"		border",
      "   border-red-400",
		],
		"description": "Debug Tailwind"
	},

	"Import s": {
		"prefix": "imps",
		"body": [
			"import s from './${0:$TM_FILENAME_BASE}.module.css'",
		],
		"description": "import s from './${0:$TM_FILENAME_BASE}."
	},


	"<Img with attribs>": {
		"prefix": "img",
		"body": [
			"<img alt='${0:SEO}'\nloading='lazy'\nwidth={$1}\nheight={$2}\naria-label='${3:Descriptive image text}'\n/> ",
		],
		"description": "img <img attribs />"
	},

	"export default f() {} .m.css": {
		"prefix": "fnedfnM",
		"body": [
			"import s from './${0:$TM_FILENAME_BASE}.module.css'\n",
			"export default function ${0:$TM_FILENAME_BASE} () {",
			"return <>\n\t\t${0:$TM_FILENAME_BASE}\n\t</>",
			"}"
		],
		"description": "export default f() {}"
	},

	"export default f() {}": {
		"prefix": "fnedfn",
		"body": [
			"export default function ${0:$TM_FILENAME_BASE} () {",
			"return <>\n\t${1:HelloWorld}\n</>",
			"}"
		],
		"description": "export default f() {}"
	},

	"export const $f = () => { $ }": {
		"prefix": "fnaae=>{}fn",
		"body": [
			"export const ${0:$TM_FILENAME_BASE} = () => {",
			"return (\n\t\t<div>\n\t${0:$TM_FILENAME_BASE}\n</div>\n\t)",
			"}"
		],
		"description": "export const f = () => {}"
	},

	"export function $f() { $ }": {
		"prefix": "fne{}fn",
		"body": [
			"export function ${0:$TM_FILENAME_BASE} () {",
			"return <div>\n\t${0:$TM_FILENAME_BASE}\n</div>",
			"}"
		],
		"description": "export f() {}"
	},

	"Replace Statement": {
		"prefix": "rpl",
		"body": [
			":%s/\"/'/g",
		],
		"description": "Replace statement \" -> ' for vim"
	},

	"!Replace Statement": {
		"prefix": "rpl!",
		"body": [
			":%s/'/\"/g",
		],
		"description": "Replace statement ' -> \" for vim"
	},

	"Entry point of React App": {
		"prefix": "entryPoint",
		"body": [
			"import React from 'react'",
			"import ReactDOM from 'react-dom/client'",
			"import { App } from './App'\n",
			"const root = ReactDOM.createRoot(document.getElementById('root'))",
			"root.render(<App />)",
		],
		"description": "Entry point of React App"
	},

	"Separator /* +--+ */": {
		"prefix": "qtsep",
		"body": [
			"/* +-----------------------------------------------------------------------------+ */"
		],
		"description": "Separator"
	},

	"Title of the top": {
		"prefix": "qttop",
		"body": [
			"/**",
			" * +-------------------------------------------------------------+",
			" *?| ${1:Ejemplo conceptual The Abstract Factory}                $2*",
			" *?| ${3:Este ejemplo ilustra la estructura del patrÃ³n}          $4*",
			" *?| ${5:centrÃ¡ndose en responder las siguientes preguntas:}     $6*",
			" *?| ${7:Â¿De quÃ© clases se compone?}                             $8*",
			" *?| ${9:Â¿QuÃ© papeles juegan esas clases?}                       $10*",
			" *?| ${11:Â¿De quÃ© forma se relacionan los elementos del patrÃ³n?} $12*",
			" *?| ${13:index.ts: Ejemplo conceptual}                          $14*",
			" * +-------------------------------------------------------------+",
			"*/",
		],
		"description": "Title of the top"
	},

	"T cl": {
		"prefix": "tcl",
		"body": ["export ${1:TM_FILENAME_BASE}\n", "((e) => console.log(e)) ($0)"]
	},

	"function () => {}": {
		"prefix": "fnf",
		"body": "function ${1:name} (${2:param}) {\n\t${3:return }\n}",
		"description": "function [name] () {}"
	},

	"export const = () => {}": {
		"prefix": "fneaf",
		"body": "export const ${1:name} = (${2:param}) => {\n\t${3:return }\n}",
		"description": "export const [name] = () => {}"
	},

	"export function () {}": {
		"prefix": "fnef",
		"body": "export function ${1:name} (${2:param}) {\n\t${3:return }\n}",
		"description": "export function [name] () {}"
	},

	"() => {}": {
		"prefix": "fnan",
		"body": "(${1:el}) => ${2:r}",
		"description": "annon () => {}"
	},

	"f = () => ": {
		"prefix": "fnaf",
		"body": "const ${1:named} = (${2:param}) => ${3:r}",
		"description": "named arrow f = () => "
	},

	"f = () => {}": {
		"prefix": "fnaff",
		"body": "const ${1:named} = (${2:param}) => {\n\t${3:r}\n}",
		"description": "named arrow f () => {}"
	},

	"QuteComments [*]": {
		"prefix": "qttcom",
		"body": [
			"/****************************************************************",
			" *        $2           *::${1:PrinterCheatsheet}::*          $2          *",
			" ******************************|********************************/"
		],
		"description": "Qute comments standard"
	},

	"QuteComments [t]": {
		"prefix": "qtcom",
		"body": [
			"/*",
			" *         $2        *::${1:FUNCTIONAL}::*       $2",
			" *******************************|********************************/",
		],
		"description": "Qute comments title"
	},

	"QuteComments [tt]": {
		"prefix": "qttcom",
		"body": [
			"/*",
			" !         $2        *::${1:FUNCTIONAL}::*       $2",
			" *******************************|********************************/",
		],
		"description": "Qute comments title"
	},

	"QuteCommentsTEST [!]": {
		"prefix": "qtcomt",
		"body": [
			"/****************************************************************",
			" *         $2           !::${1:TESTQCOM}::!          $2          *",
			" ******************************|********************************/"
		],
		"description": "Qute comments for TEST"
	},

	"QuteCommentsForCore": {
		"prefix": "qtcore",
		"body": [
			"/****************************************************************",
			" *::::::::::::$2::::::::*::${1:PRINT|VERSION}::*::::::::::::$2::::::::::*",
			" ******************************|********************************/",
			"$3"
		],
		"description": "Qute comments for the core"
	},

	"QuteCommentsForDate": {
		"prefix": "qtdat",
		"body": [
			"/****************************************************************",
			" *:::::::::::$2:::::::*::${1:MY|JSON|CONFIGS}::*::::::::::$2:::::::::*",
			" *!::::::::::$4:::::::::*::$CURRENT_DATE/${CURRENT_MONTH_NAME_SHORT/(.*)/${1:/upcase}/}/$CURRENT_YEAR_SHORT::*::::::::::::$4::::::::*",
			" ******************************|********************************/",
			"$5"
		],
		"description": "Qute comments for the date"
	},

	"Doc": {
		"prefix": "qtComDoc",
		"body": ["/**", " * $1", " */"],
		"description": "doc Documentation comments"
	},

	"describe ('', ()=> {})": {
		"prefix": "desc",
		"body": ["describe('$1', () => {", "\t$0", "});", ""],
		"description": "describe block"
	},

	"test ('', () => {})": {
		"prefix": "test",
		"body": ["test('should $1', () => {", "\t$0", "\texpect($2).toBe($3)\n});", ""],
		"description": "test block"
	},

	"test ('', async () => {})": {
		"prefix": "testa",
		"body": ["test('should $1', async () => {", "\t$0", "});", ""],
		"description": "tset async block"
	},

	"it('', () => {})": {
		"prefix": "it",
		"body": ["it('should $1', () => {", "\t$0", "})", ""],
		"description": "it block"
	},

	"it('', async () => {})": {
		"prefix": "ita",
		"body": ["it('should $1', async () => {", "\t$0", "})", ""],
		"description": "it async block"
	},

	"timeStamp () => {}": {
		"prefix": "timeS",
		"body": [
			"const timeStamp = () => (new Date()).toLocaleString()"
		],
		"description": "() => (new Date()).toLocaleString()"
	},

	"matra for testing": {
		"prefix": "mantra",
		"body": [
			"/*-------------<AAA>-<Mantra>-<AAA>------------*/",
			"//Arrange ->",
			"//Act     ->",
			"//Assert  ->",
		],
		"description": "Mantra AAA"
	},

	"ufnR2 const () => {} export": {
		"prefix": "uti",
		"body": [
			"import React from 'react';\n",
			"export function ${1:$TM_FILENAME_BASE} () {\n\treturn <>\n",
			"\t<h1>${1:$TM_FILENAME_BASE}</h1>$2\n",
			"</>\n};",
		],
		"description": "imrd -> React Component export {}"
	},


}
