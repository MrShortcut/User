{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:

	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// },

	"uti 2 ufnR2 export const () => {}": {
		"prefix": "uti2",
		"body": [
			"import React from 'react';\n",
			"export const ${1:$TM_FILENAME_BASE} = () => { \n\treturn <>\n",
			"\t<h1>${1:$TM_FILENAME_BASE}</h1>\n\t$2",
			"\t</>\n}",
		],
		"description": "imrd -> React Component export {}"
	},

	"Entry point of React App": {
		"prefix": "entryPoint",
		"body": [
			"import React from 'react'",
			"import ReactDOM from 'react-dom/client'",
			"import { App } from './App'\n",
			"const root = ReactDOM.createRoot(document.getElementById('root'))",
			"root.render(<App />)",
		],
		"description": "Entry point of React App"
	},

	"Separator /* +--+ */": {
		"prefix": "qsep",
		"body": [
			"/* +-----------------------------------------------------------------------------+ */"
		],
		"description": "Separator"
	},

	"Title of the top /** +--+ */": {
		"prefix": "qttop",
		"body": [
			"/**",
			" * +-------------------------------------------------------------+",
			" *?| ${1:Ejemplo conceptual The Abstract Factory}                $2*",
			" *?| ${3:Este ejemplo ilustra la estructura del patrón}          $4*",
			" *?| ${5:centrándose en responder las siguientes preguntas:}     $6*",
			" *?| ${7:¿De qué clases se compone?}                             $8*",
			" *?| ${9:¿Qué papeles juegan esas clases?}                       $10*",
			" *?| ${11:¿De qué forma se relacionan los elementos del patrón?} $12*",
			" *?| ${13:index.ts: Ejemplo conceptual}                          $14*",
			" * +-------------------------------------------------------------+",
			"*/",
		],
		"description": "Title of the top"
	},

	"fill new Array": {
		"prefix": "fillA",
		"body": [
			"const ${2:arr} = new Array(${1:4}).fill(null).map((v,i) => i)",
			"$3"
		],
		"description": "new Array().fill()"
	},

	"timeStamp () => {}": {
		"prefix": "timeS",
		"body": [
			"const timeStamp = () => (new Date()).toLocaleString()"
		],
		"description": "() => (new Date()).toLocaleString()"
	},

	"matra for testing": {
		"prefix": "qmantra",
		"body": [
			"/*-------------<AAA>-<Mantra>-<AAA>------------*/",
			"// Arrange ->",
			"// Act ->",
			"// Assert ->",
		],
		"description": "Mantra AAA"
	},

	"QuteCommentsForDate": {
		"prefix": "qdat",
		"body": [
			"/****************************************************************",
			"*::::::::::::$2:::::::*::${1:MY|JSON|CONFIGS}::*::::::::::$2:::::::::*",
			"*!:::::::::::$4:::::::::*::$CURRENT_DATE/${CURRENT_MONTH_NAME_SHORT/(.*)/${1:/upcase}/}/$CURRENT_YEAR_SHORT::*::::::::::::$4::::::::*",
			"****************************************************************/",
			"$5"
		],
		"description": "Qute comments for the date"
	},

	"QuteCommentsForCore": {
		"prefix": "qcore",
		"body": [
			"/****************************************************************",
			" *::::::::::::$2::::::::*::${1:PRINT|VERSION}::*::::::::::::$2::::::::::*",
			" ***************************************************************/",
			"$3"
		],
		"description": "Qute comments for the core"
	},

	"QuteComments [t]": {
		"prefix": "qtcom",
		"body": [
			"/*",
			" *         $2        *::${1:FUNCTIONAL}::*       $2",
			" *******************************|********************************/",
		],
		"description": "Qute comments title"
	},

	"QuteComments [tt]": {
		"prefix": "qttcom",
		"body": [
			"/*",
			" !         $2        *::${1:FUNCTIONAL}::*       $2",
			" ******************************|*******************************/",
		],
		"description": "Qute comments title"
	},


	"Colors of consola": {
		"prefix": "ccolors",
		"body": [
			"/**",
			" * @Colors consola",
			" */",
			"// \\x1b[32m%s\\x1b[0m // green",
			"// \\x1b[31m%s\\x1b[0m // red",
			"// \\x1b[33m%s\\x1b[0m // yellow",
			"// \\x1b[34m%s\\x1b[0m // blue",
			"// \\x1b[35m%s\\x1b[0m // magenta",
			"// \\x1b[36m%s\\x1b[0m // cyan",
			"// \\x1b[37m%s\\x1b[0m // white",
			"// \\x1b[90m%s\\x1b[0m // gray",
			"// \\x1b[91m%s\\x1b[0m // red bright",
			"// \\x1b[92m%s\\x1b[0m // green bright",
			"// \\x1b[93m%s\\x1b[0m // yellow bright",
			"// \\x1b[94m%s\\x1b[0m // blue bright",
			"// \\x1b[95m%s\\x1b[0m // magenta bright",
			"// \\x1b[96m%s\\x1b[0m // cyan bright",
			"// \\x1b[97m%s\\x1b[0m // white bright",
			"// \\x1b[40m%s\\x1b[0m // black",
			"// \\x1b[41m%s\\x1b[0m // red bright",
			"// \\x1b[42m%s\\x1b[0m // green bright",
			"// \\x1b[43m%s\\x1b[0m // yellow bright",
			"// \\x1b[44m%s\\x1b[0m // blue bright",
			"// \\x1b[45m%s\\x1b[0m // magenta bright",
			"// \\x1b[46m%s\\x1b[0m // cyan bright",
			"// \\x1b[47m%s\\x1b[0m // white bright",
		],
		"description": "Console colors terminal"
	},

	"3Log": {
		"prefix": "3Log",
		"body": [
			"fLog$1\n",
			"eLog$2\n",
			"uLog$3"
		],
		"description": "🤖 Logger -> "
	},

	"EmojiPediaLogger emojis log": {
		"prefix": "eLog",
		"body": [
			"/**",
			" * #### Emojis that I use to log to the console -> smile 😀 check ✅, cross ❌",
			" * @> loading 🔄",
			" * @> error: 🚩",
			" * @> info: ℹ️ ",
			" * @> deprecated: 💩",
			"//todo....",
			" * warning: '⚠️', * error: '🛑', info: 'ℹ️', question: '❓', *	exclamation: '❗', robot: '🤖', deploy: '🚀', *	bug: '🐛', code: '💻', git: '🐙', *	lol: '😂', not_working: '🚫', todo: '💡', *	task: '🗒', fake: '🤔', bad: '💀', *	good: '💯', nice: '🙌', very_nice: '🤗', *	very_good: '🤩', glass: '🍺', cheers: '🎉', *	thumbsup: '👍', thumbsdown: '👎', thumbsupdown: '👆', *	thumbsupdown2: '👇', thumbsupdown3: '👈', thumbsupdown4: '👉', *	thumbsupdown5: '👊', thumbsupdown6: '👋', flag: '🚩', bomb: '💣',",
			" */",
			"export const Emoji = {",
			"\t/** 😀 */",
			"\t\tsmile: '😀',",
			"\t/** ✅ */",
			"\t\tcheck: '✅',",
			"\t/** ❌ */",
			"\t\tcross: '❌',",
			"\t\tloading: '🔄',",
			"\t/** 💩 */",
			"\t\tdeprecated: '💩',",
			"\t\ttrash: '🗑',",
			"\t\twarning: '⚠️',",
			"\t\terror: '🛑',",
			"\t\tinfo: 'ℹ️',",
			"\t/** ❓ */",
			"\t\tquestion: '❓',",
			"\t\texclamation: '❗',",
			"\t/** 🤖 */",
			"\t\trobot: '🤖',",
			"\t\tdeploy: '🚀',",
			"\t\tbug: '🐛',",
			"\t\tcode: '💻',",
			"\t\tgit: '🐙',",
			"\t\tlol: '😂',",
			"\t\tnot_working: '🚫',",
			"\t\ttodo: '💡',",
			"\t\ttask: '🗒',",
			"\t\tfake: '🤔',",
			"\t\tbad: '💀',",
			"\t\tgood: '💯',",
			"\t\tnice: '🙌',",
			"\t\tvery_nice: '🤗',",
			"\t\tvery_good: '🤩',",
			"\t\tglass: '🍺',",
			"\t\tcheers: '🎉',",
			"\t\tthumbsup: '👍',",
			"\t\tthumbsdown: '👎',",
			"\t\tthumbsupdown: '👆',",
			"\t\tthumbsupdown2: '👇',",
			"\t\tthumbsupdown3: '👈',",
			"\t\tthumbsupdown4: '👉',",
			"\t\tthumbsupdown5: '👊',",
			"\t\tthumbsupdown6: '👋',",
			"\t\tflag: '🚩',",
			"\t/** 💣 */",
			"\t\tbomb: '💣',",
			"};",
		],
		"description": "🤖 Logger Emoji Collection -> "
	},

	"Logger fLog": {
		"prefix": "fLog",
		"body": [
			"/** 🤖",
			" * takes an @argument<- and logs it to the console.",
			" * @> @option <-",
			" * @> {@event} <-",
			" */",
			"export function Log(o=null, e, l='🤖') {",
			"\t!o ?  console.log(l, e)",
			"\t\t:\tconsole.log(l, o, e);",
			"};",
		],
		"description": "🤖 Logger -> FUNCTION "
	},

	"TitleJsonFormat": {
		"prefix": "tit",
		"body": [
			"\"::::::::::$2::::::::::[${1:HEADINGS}]::::::::::::$2:::::::\\n\",",
			"\"------------------------$3-------------------------\","
		],
		"description": "Title json format"
	},

	"QuteComments [*]": {
		"prefix": "qcom",
		"body": [
			"/****************************************************************",
			"*         $2           *::${1:PrinterCheatsheet}::*          $2          *",
			"****************************************************************/",
		],
		"description": "Qute comments standard"
	},

	"QuteCommentsTEST [!]": {
		"prefix": "qcomt",
		"body": [
			"/****************************************************************",
			"*         $2           !::${1:TESTQCOM}::!          $2          *",
			"****************************************************************/",
		],
		"description": "Qute comments for TEST"
	},

	"Logger Log()": {
		"prefix": "uLog",
		"body": [
			"Log($1);",
		],
		"description": "🤖 Logger -> Log(@param)"
	},

	"clg console.log($1)": {
		"prefix": "clg",
		"body": [
			"console.log($1);",
		],
		"description": "console.log(@param)"
	},

	"Doc": {
		"prefix": "qComDoc",
		"body": [
			"/**",
			" * $1",
			" */",
		],
		"description": "doc Documentation comments"
	},

	"Printer const =()=>": {
		"prefix": "printer",
		"body": [
			"const Printer =(...p)=> console.log(...p);",
			"/* -------------------------------------------- */"
		],
		"description": "Printer(...@param) -> FN"
	},

	"Print()": {
		"prefix": "fnpri",
		"body": [
			"Printer($1);",
		],
		"description": "Printer -> Printer(@param)"
	},

	"Replace Statement": {
		"prefix": "rpl",
		"body": [
			":%s/\"/'/g",
		],
		"description": "Replace statement \" -> ' for vim"
	},

	"!Replace Statement": {
		"prefix": "!rpl",
		"body": [
			":%s/'/\"/g",
		],
		"description": "Replace statement ' -> \" for vim"
	},

	"ufnR2 const () => {} export": {
		"prefix": "uti",
		"body": [
			"import React from 'react';\n",
			"const ${1:$TM_FILENAME_BASE} = () => { return ( <>\n",
			"\t<h1>${1:$TM_FILENAME_BASE}</h1>$2\n",
			"</> ) }; export { ${1:$TM_FILENAME_BASE} };",
		],
		"description": "imrd -> React Component export {}"
	},

	"stat": {
		"prefix": "est",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"],
		"description": "const [] = useState()"
	},

	"console.log('', )": {
		"prefix": "cl",
		"body": "console.log(${1:'$2', $3});",
		"description": "console.log(@param)"
	},

	"console.error('')": {
		"prefix": "ce",
		"body": "console.error($1);",
		"description": "console.error(@param)"

	},

	"normal import moduleName from 'module'": {
		"prefix": "nimp",
		"body": "import { ${2:moduleName} } from '${1:module}';",
		"description": "normal import module"
	},

	"const moduleName = require('module')": {
		"prefix": "req",
		"body": "const ${2:moduleName} = require('${1:module}');",
		"description": "require module"
	},

	"const { moduleName } = require('module')": {
		"prefix": "reqm",
		"body": "const { ${2:moduleName} } = require('${1:module}');",
		"description": "require module"
	},

	"import { destructuredModule } from 'module'": {
		"prefix": "impm",
		"body": "import { $2 } from '${1:module}';",
		"description": "import statement"
	},

	"export const () => {}": {
		"prefix": "fn",
		"body": "export const ${1:name} = ${2:($3)} => $4",
		"description": "export const annon () => {}"
	},

	"() => {}": {
		"prefix": "af",
		"body": "(${1:el}) => ${2:r}",
		"description": "annon () => {}"
	},

	"function () => {}": {
		"prefix": "nf",
		"body": "function ${1:name} (${2:param}) {\n\t${3:r}\n}",
		"description": "function [name] () {}"
	},

	"async () => {}": {
		"prefix": "afn",
		"body": "const ${1:name} = async ${2:($3)} => $4",
		"description": "async () => {}"
	},

	"const name = value": {
		"prefix": "c",
		"body": "const ${1:name} = ${2:value};",
		"description": "const line"
	},

	"let name = value": {
		"prefix": "l",
		"body": "let ${1:name} = ${2:value};",
		"description": "let line"
	},

	"Object const name =  { value }": {
		"prefix": "obj",
		"body": "const ${1:name} = {\n\t$2\n};",
		"description": "{}"
	},

	"const name =  [ value, ]": {
		"prefix": "arr",
		"body": "const ${1:name} = [${2:value}]",
		"description": "[]"
	},

	"const { name } = value": {
		"prefix": "des",
		"body": "const { $2 } = $1;",
		"description": "{} = destructuring"
	},

	"const [name] = value": {
		"prefix": "desa",
		"body": "const [ $2 ] = $1;",
		"description": "[] = destructuring"
	},

	"export default": {
		"prefix": "ed",
		"body": "export default ${1:$TM_FILENAME_BASE};",
		"description": "export default"
	},

	"module.exports = {}": {
		"prefix": "me",
		"body": "module.exports = {${1:$TM_FILENAME_BASE}};"
	},

	"describe ('', ()=> {})": {
		"prefix": "desc",
		"body": ["describe('$1', () => {", "\t$0", "});", ""],
		"description": "describe block"
	},

	"test ('', () => {})": {
		"prefix": "test",
		"body": ["test('should $1', () => {", "\t$0", "\texpect($2).toBe($3)\n});", ""],
		"description": "test block"
	},

	"test ('', async () => {})": {
		"prefix": "testa",
		"body": ["test('should $1', async () => {", "\t$0", "});", ""],
		"description": "tset async block"
	},

	"it('', () => {})": {
		"prefix": "it",
		"body": ["it('should $1', () => {", "\t$0", "})", ""],
		"description": "it block"
	},

	"it('', async () => {})": {
		"prefix": "ita",
		"body": ["it('should $1', async () => {", "\t$0", "})", ""],
		"description": "it async block"
	},

	"import React from 'react'": {
		"prefix": "imr",
		"body": "import React from 'react'",
		"description": "import React from 'react'"
	},

	"import ReactDOM from 'react-dom'": {
		"prefix": "imrd",
		"body": "import ReactDOM from 'react-dom';\n",
		"description": "ReactDOM react-dom"
	},

	"<></>": {
		"prefix": "fm",
		"body": "<>\n\t${1:context}\n</>",
		"description": "<> \n \n </>"
	},

	"outline": {
	"prefix": "out",
		"body":	"outline: \"1px solid red\"",
		"description": "ouline 1px solid red"
	},

	"tryCatch": {
		"prefix": "tr",
		"body": [
			"try {\t\n\t${3:fn}",
			"} catch(e) {",
			"\tconsole.error(e.stack,'\\n[*] '+e.name+' ❌','\\n[*] '+e.message+' ❌');",
			"}",
		],
		"description": "try catch block"
	},

	"React Component sTyled": {
    "prefix": "rct",
    "body": [
      "import styled from 'styled-components' \n",
      "export default function ${1:$TM_FILENAME_BASE}(){\n",
      "\treturn (",
      "\t\t<$3>",
      "\t\t\t$4",
      "\t\t</$3>",
      "\t)",
      "}\n",
      "const $3 = styled.$2`",
      "",
      "`"
    ],
    "description": "Log output to console"
  },

	"function () {} export": {
		"prefix": "ff",
		"body": ["function ${TM_FILENAME_BASE} () {\n",
			"\t return (\n\t\t$1",
			"\t);\n",
			"};\n",
			"export { ${TM_FILENAME_BASE} }",
		],
		"description": "React function"
	},

	"init ((e) => console.log(e)) ('Empecemos!');": {
		"prefix": "init",
		"body": ["((e) => console.log(e)) ('Empecemos!') \n$0"],
		"description": "((e) => console.log(e)) ('Empecemos!');"
	},

	"util export const () => {}": {
		"prefix": "ut",
		"body": ["export const ${1:$TM_FILENAME_BASE} = () => {", "\t$0", "}"],
		"description": "util function for React"
	},

	"webpack config": {
		"prefix": "wpc",
		"body": [
			"const path = require(\"path\");",
			"const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n",
			"module.exports = {",
			"  entry: \"./src/index.js\",",
			"  output: {",
			"    path: path.resolve(__dirname, \"dist\"),",
			"    filename: \"bundle.js\",",
			"  },",
			"  mode: \"development\",",
			"  resolve: {",
			"    extensions: [\".js\", \".jsx\"],",
			"  },",
			"  module: {",
			"    rules: [",
			"      {",
			"        test: /\\.(js|jsx)$/,",
			"        exclude: /node_modules/,",
			"        use: {",
			"          loader: \"babel-loader\",",
			"        },",
			"      },",
			"      {",
			"        test: /\\.html$/,",
			"        use: [",
			"          {",
			"            loader: \"html-loader\",",
			"          },",
			"        ],",
			"      },",
			"    ],",
			"  },",
			"  plugins: [",
			"    new HtmlWebpackPlugin({",
			"      template: \"./public/index.html\",",
			"      filename: \"./index.html\",",
			"    }),",
			"  ],",
			"  devServer: {",
			"    static: {",
			"\t\t\tdirectory: path.join(__dirname, \"public\"),",
			"\t\t},",
			"    compress: true,",
			"    port: 3009,",
			"\t}",
			"};",
		],
		"description": "webpack configuration"
	},

	"webpack production 19/jul/22 webpack.config.js": {
		"prefix": "webpp",
		"body": [
			"const path = require('path');",
			"const HtmlWebpackPlugin = require('html-webpack-plugin');",
			"const MiniCssExtractPlugin = require('mini-css-extract-plugin');",
			"const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');",
			"const { CleanWebpackPlugin } = require('clean-webpack-plugin');\n",
			"module.exports = {",
			"	entry: './src/index.js',",
			"	output: {",
			"		filename: 'bundle.js',",
			"		path: path.resolve(__dirname, 'dist'),",
			"		publicPath: '/'",
			"	},",
			"	resolve: {",
			"		extensions: ['.js', '.jsx']",
			"	},\n",
			"	mode: 'production',",
			"	module: {",
			"		rules: [",
			"			{",
			"				test: /\.(js|jsx)$/,",
			"				exclude: /node_modules/,",
			"				use: {",
			"					loader: 'babel-loader',",
			"					options: {",
			"						presets: ['@babel/preset-env', '@babel/preset-react']",
			"					},",
			"				}",
			"			},",
			"			{",
			"				test: /\.(png|jpg|gif|svg|jpeg|pdf)$/,",
			"				type: 'asset/resource',",
			"			},",
			"			{",
			"				test: /\.html$/,",
			"				use: { loader: 'html-loader', }",
			"			},",
			"			{",
			"				test: /\.css$/,",
			"				use: [",
			"					MiniCssExtractPlugin.loader,",
			"					{ loader: 'css-loader', }",
			"				]",
			"			},",
			"		]",
			"	},",
			"	plugins: [",
			"		new HtmlWebpackPlugin({",
			"			template: './public/index.html',",
			"			filename: './index.html'",
			"		}),",
			"		new MiniCssExtractPlugin({",
			"			filename: 'style.css',",
			"			chunkFilename: '[name].css'",
			"		}),",
			"		new CleanWebpackPlugin(),",
			"	],\n",
			"	optimization: {",
			"		minimize: true,",
			"		minimizer: [new CssMinimizerPlugin()]",
			"	}",
			"};",
		],
		"description": "webpack config 19/jul/22 (production)"
	},

	"webpack development 19/jul/22 webpack.config.dev.js": {
		"prefix": "webpd",
		"body": [
			"const path = require('path');",
			"const HtmlWebpackPlugin = require('html-webpack-plugin');",
			"const MiniCssExtractPlugin = require('mini-css-extract-plugin');",
			"const { CleanWebpackPlugin } = require('clean-webpack-plugin');\n",
			"module.exports = {",
			"	entry: './src/index.js',",
			"	output: {",
			"		filename: 'bundle.js',",
			"		path: path.resolve(__dirname, 'dist'),",
			"		publicPath: '/'",
			"	},",
			"	resolve: {",
			"		extensions: ['.js', '.jsx']",
			"	},\n",
			"	mode: 'development',",
			"	module: {",
			"		rules: [",
			"			{",
			"				test: /\.(js|jsx)$/,",
			"				exclude: /node_modules/,",
			"				use: {",
			"					loader: 'babel-loader',",
			"					options: {",
			"						presets: ['@babel/preset-env', '@babel/preset-react']",
			"					},",
			"				}",
			"			},",
			"			{",
			"				test: /\.(png|jpg|gif|svg|jpeg|pdf)$/,",
			"				type: 'asset/resource',",
			"			},",
			"			{",
			"				test: /\.html$/,",
			"				use: { loader: 'html-loader', }",
			"			},",
			"			{",
			"				test: /\.css$/,",
			"				use: [",
			"					MiniCssExtractPlugin.loader,",
			"					{ loader: 'css-loader', }",
			"				]",
			"			},",
			"		]",
			"	},",
			"	plugins: [",
			"		new HtmlWebpackPlugin({",
			"			template: './public/index.html',",
			"			filename: './index.html'",
			"		}),",
			"		new MiniCssExtractPlugin({",
			"			filename: 'style.css',",
			"			chunkFilename: '[name].css'",
			"		}),",
			"		new CleanWebpackPlugin(),",
			"	],\n",
			"	devServer: {",
			"		static: {",
			"			directory: path.join(__dirname, 'dist')",
			"		},",
			"		port: 64340,",
			"		compress: true,",
			"		hot: true,",
			"		historyApiFallback: true,",
			"	}",
			"}",
		],
		"description": "webpack config 19/jul/22 (development)"
	},

}
